****************
** SCAN TESTS **
****************
    [  38  19  38  37   5  47  15  35   0  12   3   0  42 ...  26   0 ]
==== cpu scan, power-of-two ====
    [   0  38  57  95 132 137 184 199 234 234 246 249 249 ... 6203 6229 ]
CPU scan power-of-two number time is 0.000000 ms
==== cpu scan, non-power-of-two ====
    [   0  38  57  95 132 137 184 199 234 234 246 249 249 ... 6146 6190 ]
    passed
CPU scan non-power-of-two number time is 0.000000 ms
==== naive scan, power-of-two ====
GPU Naive Scan time is 0.031904 ms
    [   0  38  57  95 132 137 184 199 234 234 246 249 249 ... 6203 6229 ]
    passed
==== naive scan, non-power-of-two ====
GPU Naive Scan time is 0.030528 ms
    [   0  38  57  95 132 137 184 199 234 234 246 249 249 ...   0   0 ]
    passed
==== work-efficient scan, power-of-two ====
GPU Efficient Scan time is 0.110240 ms
    passed
==== work-efficient scan, non-power-of-two ====
GPU Efficient Scan time is 0.101760 ms
    passed
==== thrust scan, power-of-two ====
GPU Thrust Scan time is 0.021248 ms
    passed
==== thrust scan, non-power-of-two ====
GPU Thrust Scan time is 0.012640 ms
    passed

*********************************************
*************** EXTRA CREDIT ****************
************* RADIX SORT TESTS **************
*************** POWER-OF-TWO ****************
*********************************************
    [  38  39 246 133 151  21 173  29 210 148 221 196 118 ... 156 177 ]
==== std sort for comparasion ====
std sort for power-of-two number time is 0.000000 ms
    [   0   0   1   1   3   3   3   6   7   7   7   8   9 ... 253 255 ]

==== Extra : RadixSort ====
GPU Radix Sort time is 1.105344 ms
    passed
    [   0   0   1   1   3   3   3   6   7   7   7   8   9 ... 253 255 ]


*********************************************
*************** EXTRA CREDIT ****************
************* RADIX SORT TESTS **************
************* NON-POWER-OF-TWO **************
*********************************************
    [  38  39 246 133 151  21 173  29 210 148 221 196 118 ... 156 177 ]
==== std sort for comparasion ====
std sort for non-power-of-two number time is 0.000000 ms
    [   0   0   1   1   3   3   3   6   7   7   7   8   9 ... 253 255 ]

==== Extra : RadixSort ====
GPU Radix Sort time is 1.097664 ms
    passed
    [   0   0   1   1   3   3   3   6   7   7   7   8   9 ... 253 255 ]


*****************************
** STREAM COMPACTION TESTS **
*****************************
    [   2   3   2   1   3   1   1   1   2   0   1   0   2 ...   0   0 ]
==== cpu compact without scan, power-of-two ====
    [   2   3   2   1   3   1   1   1   2   1   2   1   1 ...   2   1 ]
    passed
CPU compact without scan power-of-two number time is 0.000000 ms
==== cpu compact without scan, non-power-of-two ====
    [   2   3   2   1   3   1   1   1   2   1   2   1   1 ...   3   2 ]
    passed
CPU compact without scan non-power-of-two number time is 0.000000 ms
==== cpu compact with scan ====
    [   2   3   2   1   3   1   1   1   2   1   2   1   1 ...   2   1 ]
    passed
CPU compact with scan time is 0.000000 ms
==== work-efficient compact, power-of-two ====
GPU Efficient Compact time is 0.221120 ms
    passed
==== work-efficient compact, non-power-of-two ====
GPU Efficient Compact time is 0.216736 ms
    passed
